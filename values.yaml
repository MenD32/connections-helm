# Default values for connections-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Frontend configuration
frontend:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/mend32/connections-frontend:main
    pullPolicy: IfNotPresent
    tag: ""
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources: {}
  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http
  podAnnotations: {}
  podLabels: {}
  env:
    connectionsApiHost: ""  # Will be dynamically set to backend service
    additional: []
      # - name: NODE_ENV
      #   value: "production"
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

# Backend configuration
backend:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/mend32/connections-backend:main
    pullPolicy: IfNotPresent
    tag: ""
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  resources: {}
  livenessProbe:
    httpGet:
      path: /health
      port: http
  readinessProbe:
    httpGet:
      path: /health
      port: http
  podAnnotations: {}
  podLabels: {}
  database:
    host: "localhost"
    port: "5432"
    user: "postgres"
    password: "password"
    name: "connections"
  env:
    additional: []
      # - name: PYTHON_ENV
      #   value: "production"
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    # targetMemoryUtilizationPercentage: 80

imagePullSecrets: []

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: chart-example.local
  frontend:
    paths:
      - path: /
        pathType: Prefix
  backend:
    paths:
      - path: /api
        pathType: Prefix
      - path: /health
        pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# OpenShift Routes (alternative to Ingress)
route:
  enabled: false
  annotations: {}
    # haproxy.router.openshift.io/rate-limit-connections: "true"
    # haproxy.router.openshift.io/rate-limit-connections.concurrent-tcp: "10"
  frontend:
    enabled: true
    host: ""
    path: "/"
    tls:
      enabled: false
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
      # certificate: |
      #   -----BEGIN CERTIFICATE-----
      #   ...
      #   -----END CERTIFICATE-----
      # key: |
      #   -----BEGIN PRIVATE KEY-----
      #   ...
      #   -----END PRIVATE KEY-----
      # caCertificate: |
      #   -----BEGIN CERTIFICATE-----
      #   ...
      #   -----END CERTIFICATE-----
  backend:
    enabled: true
    host: ""
    path: "/api"
    tls:
      enabled: false
      termination: edge
      insecureEdgeTerminationPolicy: Redirect

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# CronJob for database dumps
cronjob:
  enabled: false
  schedule: "0 2 * * *"  # Daily at 2 AM
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  startingDeadlineSeconds: 600
  restartPolicy: OnFailure
  
  # Backend repository configuration
  backendRepo:
    url: "https://github.com/your-org/connections-backend.git"
    branch: "main"
  
  # Database configuration for the dump
  database:
    host: "postgres-service"
    port: "5432"
    user: "postgres"
    password: "password"
    name: "connections"
    # Use secret for password (recommended for production)
    passwordSecret:
      enabled: false
      name: "postgres-secret"
      key: "password"
  
  # Container images
  gitImage:
    repository: "alpine/git"
    tag: "latest"
    pullPolicy: IfNotPresent
  
  postgresImage:
    repository: "postgres"
    tag: "15-alpine"
    pullPolicy: IfNotPresent
  
  # Storage for dump files
  storage:
    enabled: false
    mountPath: "/dumps"
    persistentVolumeClaim: ""  # Name of existing PVC
  
  # Environment variables
  env:
    additional: []
      # - name: DUMP_RETENTION_DAYS
      #   value: "7"
  
  # Pod configuration
  podAnnotations: {}
  resources: {}
    # limits:
    #   cpu: 500m
    #   memory: 512Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
